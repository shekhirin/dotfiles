{
  pkgs,
  inputs,
  ...
}:

let
  user = "shekhirin";
in
{
  imports = [
    ./hardware-configuration.nix
    ../../modules/shared
    ../../modules/nixos
    inputs.home-manager.nixosModules.home-manager
    inputs.ethereum-nix.nixosModules.default
  ];

  # Bootloader
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # Networking
  networking.hostName = "box";
  networking.networkmanager.enable = true;
  networking.firewall.allowedTCPPorts = [ 22 ];

  # Locale and timezone
  time.timeZone = "Europe/London";
  i18n.defaultLocale = "en_GB.UTF-8";
  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_GB.UTF-8";
    LC_IDENTIFICATION = "en_GB.UTF-8";
    LC_MEASUREMENT = "en_GB.UTF-8";
    LC_MONETARY = "en_GB.UTF-8";
    LC_NAME = "en_GB.UTF-8";
    LC_NUMERIC = "en_GB.UTF-8";
    LC_PAPER = "en_GB.UTF-8";
    LC_TELEPHONE = "en_GB.UTF-8";
    LC_TIME = "en_GB.UTF-8";
  };

  # File systems
  fileSystems."/mnt/nvme" = {
    device = "/dev/nvme0n1p1";
    fsType = "ext4";
  };
  fileSystems."/mnt/lightroom" = {
    device = "/dev/nvme1n1p2";
    fsType = "ext4";
  };

  # X11 keymap
  services.xserver.xkb = {
    layout = "us";
    variant = "";
  };

  # User configuration
  users.users.${user} = {
    isNormalUser = true;
    description = "Alexey Shekhirin";
    shell = pkgs.nushell;
    extraGroups = [
      "networkmanager"
      "wheel"
    ];
    packages = with pkgs; [ ];
    openssh.authorizedKeys.keys = [
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPW/RxwmcIDELwXMmja7fnzwIVTzIEDwqbqFSDDeCDHn shekhirin@shekhirin.local"
      "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBe6TP7V6d9DEa6eTdBQCsSlVjr3cvhUyAUDeoGBTCfj Generated By Termius"
    ];
  };

  # Allow passwordless sudo for deployment
  security.sudo.wheelNeedsPassword = false;

  # Home Manager configuration
  home-manager = {
    useGlobalPkgs = true;
    useUserPackages = true;
    users.${user} = {
      imports = [
        ../../modules/shared/packages.nix
        ../../modules/shared/shell.nix
      ];
      home.stateVersion = "25.05";
    };
  };

  # Create lighthouse and reth data directories with correct permissions
  systemd.tmpfiles.rules = [
    "d /mnt/nvme/lighthouse/mainnet 0755 lighthouse-mainnet lighthouse-mainnet -"
    "Z /mnt/nvme/lighthouse/mainnet 0755 lighthouse-mainnet lighthouse-mainnet -"
    "d /mnt/nvme/reth/mainnet 0755 reth-mainnet reth-mainnet -"
    "Z /mnt/nvme/reth/mainnet 0755 reth-mainnet reth-mainnet -"
  ];

  # Create static lighthouse user
  users.users.lighthouse-mainnet = {
    isSystemUser = true;
    group = "lighthouse-mainnet";
    home = "/var/lib/lighthouse-mainnet";
    createHome = true;
  };
  users.groups.lighthouse-mainnet = { };

  # Create static reth user
  users.users.reth-mainnet = {
    isSystemUser = true;
    group = "reth-mainnet";
    home = "/var/lib/reth-mainnet";
    createHome = true;
  };
  users.groups.reth-mainnet = { };

  # Ethereum services
  services.ethereum.lighthouse-beacon.mainnet = {
    enable = true;
    package = pkgs.lighthouse; # Explicitly specify the package
    args = {
      network = "mainnet";
      datadir = "/mnt/nvme/lighthouse/mainnet";
      http.enable = true;
      http.address = "0.0.0.0";
      http.port = 5052;
      metrics.enable = true;
      metrics.address = "0.0.0.0";
      metrics.port = 5054;
      execution-endpoint = "http://127.0.0.1:8551";
      execution-jwt = "/mnt/nvme/reth/mainnet/jwt.hex";
      checkpoint-sync-url = "https://sync-mainnet.beaconcha.in";
      user = "lighthouse-mainnet";
    };
    extraArgs = [ "--purge-db-force" ];
    openFirewall = false;
  };

  # Reth service
  services.ethereum.reth.mainnet = {
    enable = true;
    package = pkgs.reth; # Explicitly specify the package
    args = {
      datadir = "/mnt/nvme/reth/mainnet";
      chain = "mainnet";
      http = {
        enable = true;
        addr = "0.0.0.0";
        port = 8545;
        api = [
          "eth"
          "net"
          "web3"
        ];
      };
      authrpc = {
        addr = "127.0.0.1";
        port = 8551;
        jwtsecret = "/mnt/nvme/reth/mainnet/jwt.hex";
      };
      metrics = {
        enable = true;
        addr = "0.0.0.0";
        port = 9001;
      };
    };
    openFirewall = false;
  };

  # Override systemd security settings for lighthouse
  systemd.services.lighthouse-beacon-mainnet.serviceConfig = {
    DynamicUser = false;
    ProtectSystem = "yes"; # Less restrictive than "strict"
  };

  # Override systemd security settings for reth
  systemd.services.reth-mainnet.serviceConfig = {
    DynamicUser = false;
    ProtectSystem = "yes"; # Less restrictive than "strict"
    User = "reth-mainnet";
  };

  # State version
  system.stateVersion = "25.05";
}
